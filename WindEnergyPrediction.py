#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt # ploting , visualization
import seaborn as sns # ploting
from sklearn import model_selection #scikit learn
from sklearn import linear_model
from sklearn import metrics
from sklearn import preprocessing
from sklearn import utils
from sklearn import feature_selection


# In[2]:


df=pd.read_excel("c:/Users/HP/Desktop/ibm_HACK/AL_WIND_07_12.xlsx")
df.head()


# In[3]:


#checking for null values
df.isnull().sum()


# In[4]:


#checking the existance of zero values per column
df.isin([0]).sum()


# In[5]:


#Dropping the rows if any of the values equal to zero
df=df[(df != 0).all(1)]


# In[6]:


#checking again after dropping all the rows having any zero values are dropped if there exist any row with zero vaue
df.isin([0]).sum()


# In[7]:


#Checking if there any outliers exist
sns.boxplot(x=df['Power generated by system | (kW)'])


# In[8]:


sns.boxplot(x=df['Wind speed | (m/s)'])


# In[9]:


sns.boxplot(x=df["Air temperature | ('C)"])


# In[10]:


sns.boxplot(x=df['Pressure | (atm)'])


# In[11]:



sns.boxplot(x=df['Wind direction | (deg)'])


# In[13]:


#Removing the outliers from the dataframe that may harm our prediction
#This technique uses the IQR scores calculated earlier to remove outliers. The rule of thumb is that anything not in the range of (Q1 - 1.5 IQR) and (Q3 + 1.5 IQR) is an outlier, and can be removed
#Removing outliers from column named "Wind speed"
q1 = df['Wind speed | (m/s)'].quantile(0.25)
q3 = df['Wind speed | (m/s)'].quantile(0.75)
iqr = q3-q1 #Interquartile range
fence_low  = q1-1.5*iqr
fence_high = q3+1.5*iqr
df= df.loc[(df['Wind speed | (m/s)'] > fence_low) & (df['Wind speed | (m/s)'] < fence_high)]


# In[14]:


sns.boxplot(x=df['Wind speed | (m/s)'])


# In[15]:


#removing outliers from column named "Pressure"
q1 = df['Pressure | (atm)'].quantile(0.25)
q3 = df['Pressure | (atm)'].quantile(0.75)
iqr = q3-q1 #Interquartile range
fence_low  = q1-1.5*iqr
fence_high = q3+1.5*iqr
df= df.loc[(df['Pressure | (atm)'] > fence_low) & (df['Pressure | (atm)'] < fence_high)]


# In[16]:


sns.boxplot(x=df['Pressure | (atm)'])


# In[17]:


#plotting a curve wind-speed vs power gebnerated by system
sns.lmplot(x='Wind speed | (m/s)', y='Power generated by system | (kW)', data=df,
           fit_reg=False)


# In[18]:


sns.lmplot(x='Pressure | (atm)', y='Power generated by system | (kW)', data=df,
           fit_reg=False)


# In[19]:


sns.lmplot(x='Wind direction | (deg)', y='Power generated by system | (kW)', data=df,
           fit_reg=False)


# In[21]:


sns.lmplot(x="Air temperature | ('C)", y='Power generated by system | (kW)', data=df,
           fit_reg=False)


# In[22]:


#Finding co-relation among the features
df.corr()


# In[23]:


#Renaming the columns 
df.rename(columns={'Power generated by system | (kW)':'Power_generated_by_system_in_kw'}, inplace=True)
df.rename(columns={'Pressure | (atm)':'Pressure_in_atm'}, inplace=True)
df.rename(columns={"Wind direction | (deg)":"Wind_direction"}, inplace=True)
df.rename(columns={"Wind speed | (m/s)":"Wind_speed_in_m_s"}, inplace=True)


# In[25]:


df.info()


# In[44]:


X=df.drop(["Power_generated_by_system_in_kw","DateTime","Air temperature | ('C)","Pressure_in_atm"],axis=1)


# In[45]:


#excluding the target variable
Y=df["Power_generated_by_system_in_kw"]


# In[46]:


#stadarizing the data
from sklearn.preprocessing import StandardScaler


# In[47]:



scale=StandardScaler()


# In[48]:


X=scale.fit_transform(X)


# In[49]:


X[:5]


# In[50]:


#splitting the data into training and testing
from sklearn.model_selection import train_test_split
Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, test_size=0.25, random_state=42)


# In[51]:


#Calling LinearRegression Model
regressor=linear_model.LinearRegression()


# In[52]:


regressor.fit(Xtrain,Ytrain)


# In[53]:


Y_pred=regressor.predict(Xtest)


# In[54]:


# Root Mean Squared Error
rmse=np.sqrt(np.mean((Ytest-Y_pred)**2))


# In[55]:


rmse


# In[56]:


# testing model score
regressor.score(Xtest,Ytest)


# In[57]:


import pickle


# In[58]:


pickle.dump(regressor,open('model.pkl','wb'))
model=pickle.load(open('model.pkl','rb'))


# In[ ]:




